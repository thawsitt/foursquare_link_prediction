"""
Preprocessing: Run processCheckins.py before running this script. This process
depends on checkins.txt, which is generated by the mentioned script.

Description: 60% of users only checkin to a single venue, drastically decreasing
the probability that our predicted link exists in our testing set. To remedy,
We are truncated our original dataset by removing checkins where the user has
only a single checkin.

Output: File checkinsTrunc.txt, the truncated list of checkins.txt
"""

# Original number of unique users: 485381
# Original number of unique venues: 83999
# Max user id: 2153502
# Min venue id: 2153503

import cPickle as pickle

def remove_single_checkins(filename):
    user_checkin_venues = {}
    with open(filename, 'r') as checkins:
        for line in checkins:
            user_venue = [s.strip() for s in line.split()]
            user_id = user_venue[0]
            venue_id = user_venue[1]
            if user_id in user_checkin_venues:
                user_checkin_venues[user_id].append(venue_id)
            else:
                user_checkin_venues[user_id] = [venue_id]
    
    user_venue_pairs = []
    for user, venues in user_checkin_venues.iteritems():
        assert len(venues) > 0

        # Log checkins where user checked in to more than 1 distinct venue
        diff_venues = set(venues)
        if len(diff_venues) > 1:
            for venue in venues:
                user_venue_pairs.append((user, venue))

    return user_venue_pairs
            

def output_data(filename, user_venue_pairs):
    with open(filename, 'w') as checkins:
        for pair in user_venue_pairs:
            user_id, venue_id = pair
            checkins.write('{}\t{}\n'.format(user_id, venue_id))



def write_pickles(pickle_users, pickle_venues, users_venues):
    users, venues = zip(*users_venues)
    assert len(users) == len(venues)
    with open(pickle_users, 'w') as file:
        pickle.dump(users, file, protocol=pickle.HIGHEST_PROTOCOL)
    with open(pickle_venues, 'w') as file:
        pickle.dump(venues, file, protocol=pickle.HIGHEST_PROTOCOL)


def main():
    path = 'code/'
    infile = 'checkins.txt'
    outfile = 'checkinsTrunc.txt'
    pickle_users = 'user_ids_trunc.pickle'
    pickle_venues = 'venue_ids_trunc.pickle'

    checkinsTrunc = remove_single_checkins(path + infile)
    output_data(path + outfile, checkinsTrunc)
    write_pickles(path + pickle_users, path + pickle_venues, checkinsTrunc)


if __name__ == '__main__':
    main()
